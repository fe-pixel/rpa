{
  "openUrl": "module.exports = async (context) => { \n  let {driver,args,options} = context;\n  await driver.get(args.openUrl);\n  return {\n    code: 0,\n    data: null,\n    message: 'ok',\n  };\n}\n\n\n",
  "shopline_auth": "const { Builder, By, until, logging, Actions, Key } = require('selenium-webdriver');\nconst { Options, ServiceBuilder } = require('selenium-webdriver/chrome');\nconst { XMLHttpRequest } = require('xmlhttprequest');\nconst crypto = require('crypto');\n\nlet shopline_admin_url = null;\n\n\nlet result = {\n  code: -1,\n  data: null,\n  message: '未命中脚本,请手动登录',\n};\n\n\n\nmodule.exports =  async (context) => { \n  let {driver,args,options} = context;\n  result = shopline_auth({driver,args,result});\n  return result;\n}\n\n\n\nasync function shopline_auth({ driver,result,args}){\n  console.time('shopline:auth');\n  shopline_admin_url = args.admin_url;\n  const timeOut = 10000;//10s没请求到就退出\n  //Array.from(document.querySelectorAll(\"tbody tr td:nth-last-child(2)>span\")).map(v=>~v.innerText.indexOf('\\n')?v.innerText.slice(0,-1):v.innerText).join(\",\")\n  const shopline_admin_authorize = 'oauth-web/#/oauth/authorize?appKey=ef1df4c9542c215dc539c586eaf43c8336a055d5&responseType=code&scope=read_customers,read_discounts,read_draft_orders,read_inventory,read_metafileds,read_orders,read_page,read_price_rules,read_products,read_script_tags,read_themes,read_store_information,read_store_metrics,read_marketing_event,read_payment&redirectUri=https%3A%2F%2Fstarter.shopviewer.com/#/login';\n\n  const shopline_admin_create_url = 'oauth/token/create';\n  const secret = 'e1d63ecde596288f6bc9b0f7d27a43b24ff23e0e';\n  const create_headers = {\n    'content-type': 'application/json;charset=UTF-8',\n    appkey: 'ef1df4c9542c215dc539c586eaf43c8336a055d5',\n    sign: '',\n    timestamp: '1655864538757',\n  };\n  let create_body = JSON.stringify({\n    code: 'us50d35ea3235bfb9c141174f4b9ea8ee7fd0c00ef',\n  });\n\n  try {\n    await driver.get(shopline_admin_url);\n    await driver.get(shopline_admin_url + shopline_admin_authorize);\n    \n\n    //下面两个条件满足一个退出另外一个\n    let mark = false;\n    const promise1 = driver.wait(() => {\n      console.count(\"timeA\");\n      if (mark) return true;\n      return until.elementLocated(By.css('main button.ant-btn-primary'))\n     }, timeOut, '执行超时', 1000);\n    \n   \n    //重定向\n    let promise2 = driver.wait(async () => {\n      if (mark) return true;\n      console.count(\"timeB\");\n      const currCurl = await driver.getCurrentUrl();\n      return currCurl !== (shopline_admin_url + shopline_admin_authorize);\n    }, timeOut, '执行超时', 1000);\n\n    let res = await Promise.race([promise1, promise2]);\n    mark = true;\n    res = await res.fn(driver);\n\n    if (res!==undefined) {\n      res = await res.fn(driver);\n      let authDom = await driver.findElement(By.css('main button.ant-btn-primary'));\n      console.log(\"authDom\",authDom);\n      await authDom.click();\n    } else { \n      console.log(\"令牌失效重新走点击按钮授权逻辑\");\n    }\n    //点击后还会跳转走下面逻辑\n    await driver.wait(async () => {\n      console.count(\"timeB-agin\");\n      const currCurl = await driver.getCurrentUrl();\n      return currCurl !== (shopline_admin_url + shopline_admin_authorize);\n    }, timeOut, '执行超时', 1000);\n    const currUrl = await driver.getCurrentUrl();\n    await driver.get(shopline_admin_url);\n\n    /**\n{\n  appkey: 'ef1df4c9542c215dc539c586eaf43c8336a055d5',\n  code: 'us5b1e88760b1423ca78e0798e35617fe0a9b49560',\n  handle: 'zzshopline',\n  timestamp: '1656061350581',\n  sign: 'ce97539f10241d358017aee093fa0d1dd9fa5848bdaa802d23f4ff5000f298b0'\n}\n     */\n    const params = getJSONByURL(currUrl);\n    create_body = JSON.stringify({ code: params.code });\n    const timestamp = Date.now();\n    const hmac = crypto.createHmac('sha256', secret);\n    hmac.update(create_body + timestamp);\n    create_headers.sign = hmac.digest('hex');\n    create_headers.timestamp = timestamp;\n    result = await driver.executeAsyncScript(fetchCreate, shopline_admin_create_url, create_headers, create_body);\n  } catch (error) {\n    result.code = -3;\n    result.message = error.toString();\n  } finally {\n    console.timeEnd('shopline:auth');\n    return result;\n  }\n};\n\nasync function fetchCreate( shopline_admin_create_url, create_headers, create_body) {\n  const callback = arguments[arguments.length - 1];\n  const res = await (await fetch(shopline_admin_create_url, {\n    method: 'POST',\n    headers: create_headers,\n    body:create_body\n  })).json();\n  if (res?.code === 200) {\n    callback({\n      code: 0,\n      data: res?.data,\n      message:res?.message\n    });\n  } else { \n    callback({\n      code: 1,\n      data: null,\n      message:res?.message\n    });\n  }\n}\n\n\nfunction getJSONByURL(params) {\n  const index = params.indexOf('?');\n  if (!~index) return {};\n  params = params.slice(index + 1);\n  const res = {};\n  for (const item of params.split('&')) {\n    const [key, val] = item.split('=');\n    res[key] = val;\n  }\n  return res;\n}\n\nexports.shopline_auth = shopline_auth;\n\n\n\n",
  "shopline_list": "const { Builder, By, until, logging, Actions, Key } = require('selenium-webdriver');\nconst { Options, ServiceBuilder } = require('selenium-webdriver/chrome');\nconst { XMLHttpRequest } = require('xmlhttprequest');\n\n\nlet result = {\n  code: -1,\n  data: null,\n  message: '未命中脚本,请手动登录',\n};\n\n\n\nmodule.exports =  async (context) => { \n  let {driver,args,options} = context;\n  result = shopline_list({driver,result});\n  return result;\n}\n\n\nasync function shopline_list({ driver,result}){\n  console.time('shopline:list');\n  const timeOut = 10000;//10s没请求到就退出\n  const shopline_list_url = 'https://admin.myshopline.com/stores/list';\n  const shopline_list_fetchURL = 'https://admin.myshopline.com/api/merchant/stores/list?pageSize=999&pageNum=1&dataDisplayMode=ACTIVATED_LIST';\n\n  try {\n    await driver.get(shopline_list_url);\n    result = await driver.executeAsyncScript(fetchShopList,shopline_list_fetchURL);\n  } catch (error) {\n    result.code = -3;\n    result.message = error;\n  } finally {\n    console.timeEnd('shopline:list');\n    return result;\n  }\n}\n\n\nasync function fetchShopList(shopline_list_fetchURL) { \n    const callback = arguments[arguments.length - 1];\n    const res = await (await fetch(shopline_list_fetchURL, {})).json();\n    if (res?.code === \"SUCCESS\") {\n      callback({\n        code: 0,\n        data: res?.data,\n        message:res?.msg\n      });\n    } else { \n      callback({\n        code: 11,\n        data: null,\n        message:res?.msg\n      });\n    }\n}\nexports.shopline_list = shopline_list;\n\n",
  "shopline_login": "const { Builder, By, until, logging, Actions, Key } = require('selenium-webdriver');\r\nconst { Options, ServiceBuilder } = require('selenium-webdriver/chrome');\r\nconst { XMLHttpRequest } = require('xmlhttprequest');\r\n\r\nlet account = null;\r\nlet password = null;\r\n\r\nconst timeOut = 10000;//10s没请求到就退出\r\nconst shopline_login_url = 'https://admin.myshopline.com/user/signIn';\r\n\r\nconst loginSuccess = 'https://admin.myshopline.com/stores/list';\r\n\r\nconst loginInfoURL = 'https://admin.myshopline.com/api/merchant/staffs/merchant/email/list';\r\n\r\nlet result = {\r\n  code: -1,\r\n  data: null,\r\n  message: '未命中脚本,请手动登录',\r\n}\r\nmodule.exports =  async (context) => { \r\n  let { driver, args, options } = context;\r\n  console.time('shopline:login');\r\n  account = args.account;\r\n  password = args.password;\r\n  \r\n  await driver.get(shopline_login_url);\r\n  let cookies = await driver.manage().getCookies() || [];\r\n  //通过cookie判断是否跳过登录\r\n  const res = cookies.find(v => v.domain === '.myshopline.com' && v.name === 'a_osudb_oar');\r\n  res && console.log('cookies找到');\r\n  if (!res) {\r\n    result = await loginProcess(driver);\r\n  } else {\r\n    //已经登录\r\n    await driver.get(loginSuccess);\r\n    let { code,data } = await driver.executeAsyncScript(fetchLoginInfo, loginInfoURL);\r\n    if (code !== 0) return;\r\n    //判断是否是本人登录\r\n    if (data && data.toString() === account) {\r\n      cookies = cookies.map(v => {\r\n        v.expires = v.expiry;\r\n        delete v.expiry;\r\n        return v;\r\n      });\r\n      result = {\r\n        code: 0,\r\n        data: cookies,\r\n        message: '已登录，跳过登录返回',\r\n      };\r\n    } else { \r\n      console.log(\"登录，但不是本人，执行退出登录重新进入\");\r\n      const avatarDOM = await driver.wait(until.elementLocated(By.css('.ant-avatar.ant-avatar-circle.ant-avatar-image')), timeOut, '执行超时', 1000);\r\n      avatarDOM.click();\r\n      await driver.sleep(1000);\r\n      let dom = await driver.findElement(By.css('.ant-dropdown-menu-item.ant-dropdown-menu-item-only-child'));\r\n      if (dom) {\r\n        await dom.click();\r\n        await driver.get(shopline_login_url);\r\n        console.log(\"重新登录上\");\r\n        result = await loginProcess(driver);\r\n        console.log(\"重新登录上\",result);\r\n      }\r\n    }\r\n  }\r\n\r\n  console.timeEnd('shopline:login');\r\n  return result;\r\n}\r\n\r\n\r\nasync function loginProcess(driver) {\r\n  const action = driver.actions({ async: true, bridge: true });\r\n  const cmdCtrl = process.platform === 'win32' ? Key.CONTROL : Key.COMMAND;\r\n  \r\n  const accountDOM = await driver.wait(until.elementLocated(By.css('input')), timeOut, '执行超时', 1000);\r\n  //防止浏览器自动填充\r\n  await accountDOM.click();\r\n  await action.keyDown(cmdCtrl).sendKeys('a').keyUp(cmdCtrl)\r\n    .keyDown(Key.DELETE)\r\n    .perform();\r\n  await accountDOM.sendKeys(account);\r\n  //防止浏览器自动填充\r\n  const passwordDOM = await driver.findElement(By.css(\"input[type='password']\"));\r\n  await passwordDOM.click();\r\n  await action.keyDown(cmdCtrl).sendKeys('a').keyUp(cmdCtrl)\r\n    .keyDown(Key.DELETE)\r\n    .perform();\r\n  await passwordDOM.sendKeys(password);\r\n  await driver.findElement(By.css(\"button[type ='submit']\")).click();\r\n  await driver.wait(async () => { \r\n    let cookies = await driver.manage().getCookies() || [];\r\n    //通过cookie判断是否跳过登录\r\n    return cookies.find(v => v.domain === '.myshopline.com' && v.name === 'a_osudb_oar');\r\n  }, timeOut, '执行超时', 1000);\r\n\r\n  let cookies = await driver.manage().getCookies();\r\n\r\n  cookies = cookies.map(v => {\r\n    v.expires = v.expiry;\r\n    delete v.expiry;\r\n    return v;\r\n  });\r\n  return {\r\n    code: 0,\r\n    data: cookies,\r\n    message: 'OK',\r\n  };\r\n}\r\n\r\n\r\nasync function fetchLoginInfo(loginInfoURL) { \r\n  const callback = arguments[arguments.length - 1];\r\n  const res = await (await fetch(loginInfoURL, {})).json();\r\n  if (res?.code === \"SUCCESS\") {\r\n    callback({\r\n      code: 0,\r\n      data: res?.data,\r\n      message:res?.msg\r\n    });\r\n  } else { \r\n    callback({\r\n      code: 11,\r\n      data: null,\r\n      message:res?.msg\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
}