const templateJSON = { "autoLoginBaidu": "//因为有手机号验证，自动登录跳过，直接执行失败\nmodule.exports = async ({ args }) => { \n  return args\n}\n\n\n\n\n\n\n\n", "autoLoginDouyin": "const {\n  log,\n  logInfo,\n  logError\n} = require('@fe-pixel/rpa-node');\nconst {\n  Builder,\n  By,\n  until,\n  logging,\n  Actions,\n  Key\n} = require('selenium-webdriver');\n\nconst login_url = 'https://www.tiktok.com';\n\nconst timeOut = 10 * 1000;\nmodule.exports = async ({\n  args,\n  driver\n}) => {\n\n  let {\n    account,\n    password\n  } = args;\n\n  await driver.get(login_url);\n\n  await driver.sleep(2000);\n  let cookies = await driver.manage().getCookies() || [];\n  // 通过cookie判断是否跳过登录\n  const res = cookies.find(v => v.name === 'cmpl_token');\n  logInfo(\"正在检测登录状态\")\n  if (res) {\n    log('cookies找到,原本已登录');\n    log('登录成功');\n    logInfo(\"登录成功\")\n    return {\n      code: 0,\n      message: \"登录成功\",\n      data: null\n    }\n  } else {\n    log('cookies没找到,执行登录程序');\n    logInfo(\"未登录，执行登录程序\")\n    //top-login-button\n    const loginDom = await driver.wait(until.elementLocated(By.css(`[data-e2e='top-login-button']`)), timeOut, '执行超时', 1000);\n    loginDom.click();\n    //点击账户的方式\n    const zhanghuDom = await driver.wait(until.elementLocated(By.css(`[href=\"/login/phone-or-email\"]`)), timeOut, '执行超时', 1000);\n    zhanghuDom.click();\n\n    //使用电子邮件\n    const emailDom = await driver.wait(until.elementLocated(By.css(`[href=\"/login/phone-or-email/email\"]`)), timeOut, '执行超时', 1000);\n    emailDom.click();\n\n    //账户填充\n    // const accountDom = await driver.wait(until.elementLocated(By.css(`input[name=\"username\"]`)), timeOut, '执行超时', 1000);\n    // await accountDom.clear()\n    // await accountDom.sendKeys(account);\n    // await driver.sleep(1000);\n    // //密码填充\n    // const passwordDom = await driver.wait(until.elementLocated(By.css(`input[type=\"password\"]`)), timeOut, '执行超时', 1000);\n    // await passwordDom.clear()\n    // await passwordDom.sendKeys(password);\n\n    //提交\n    await driver.sleep(2000);\n    const submitDom = await driver.wait(until.elementLocated(By.css(`button[data-e2e=\"login-button\"]`)), timeOut, '执行超时', 1000);\n    await submitDom.click();\n    log('点击登录');\n    logInfo(\"点击登录\")\n    await driver.wait(async () => {\n      let cookies = await driver.manage().getCookies() || [];\n      //通过cookie判断是否跳过登录\n      return !!cookies.find(v => v.name === 'cmpl_token');\n    }, timeOut, '登录超时', 1000);\n    log('登录程序执行成功');\n    logInfo(\"登录程序执行成功\")\n    return {\n      code: 0,\n      message: \"登录成功\",\n      data: null\n    }\n  }\n}", "autoLoginError": "//因为有手机号验证，自动登录跳过，直接执行失败\nmodule.exports = async () => { \n  return {\n    \"code\":-1,\n    \"data\":null,\n    \"message\":\"登录失败\"\n  }\n}\n", "autoLoginScript": "const { Builder, By, until, logging, Actions, Key } = require('selenium-webdriver');\nconst { Options, ServiceBuilder } = require('selenium-webdriver/chrome');\n\nlet account = null;\nlet password = null;\n\nconst timeOut = 10*1000;//10s没请求到就退出\nconst shopline_login_url = 'https://admin.myshopline.com/user/signIn';\n\nconst loginSuccess = 'https://admin.myshopline.com/stores/list';\n\nconst loginInfoURL = 'https://admin.myshopline.com/api/merchant/merchants';\nconst loginOutURL = 'https://admin.myshopline.com/udb/lgn/login/logout.do';\n\n\nmodule.exports =  async (context) => { \n  let { driver, args, options } = context;\n  console.time('shopline:login');\n  account = args.account;\n  await driver.get(shopline_login_url);\n  let cookies = await driver.manage().getCookies() || [];\n  //通过cookie判断是否跳过登录\n  const res = cookies.find(v => v.domain === '.myshopline.com' && v.name === 'a_osudb_oar');\n  res && console.log('cookies找到,原本已登录');\n  if (res) {\n    //判断是否是本人\n    let boo = await isSelf(driver);\n    console.log(\"isSelf\", boo);\n    if (boo) {\n      return {\n        code: 0,\n        message: \"登录成功\",\n        data: null\n      }\n    } else {\n      //不是本人，执行退出登录接口\n      console.log(\"不是本人，执行退出登录接口\");\n      await driver.executeAsyncScript(fetchLoginOut, loginOutURL);\n      return {\n        code: -1,\n        message: \"登录失败,请手动登录\",\n        data: null\n      }\n    }\n  } else {\n    await driver.sleep(2000);\n    await driver.findElement(By.css(\"button[type ='submit']\")).click();\n    await driver.wait(async () => { \n      let cookies = await driver.manage().getCookies() || [];\n      //通过cookie判断是否跳过登录\n      return !!cookies.find(v => v.domain === '.myshopline.com' && v.name === 'a_osudb_oar');\n    }, timeOut, '当前账号无法登录', 1000);\n\n    //判断是否是本人\n    let boo = await isSelf(driver);\n    console.log(\"isSelf\", boo);\n    if (boo) {\n      return {\n        code: 0,\n        message: \"登录成功\",\n        data: null\n      }\n    } else {\n       //不是本人，执行退出登录接口\n       console.log(\"执行退出登录接口\");\n       await driver.executeAsyncScript(fetchLoginOut, loginOutURL);\n       return {\n         code: -1,\n         message: \"登录失败,请手动登录\",\n         data: null\n       }\n    }\n  }\n}\n//判断是否是本人并退出\nasync function isSelf(driver) {\n    //已经登录\n  await driver.get(loginSuccess);\n    let { code, data } = await driver.executeAsyncScript(fetchLoginInfo, loginInfoURL);\n    if (data && data?.email===account) {\n      return true;\n    } else { \n      return false;\n    }\n}\n\n\nasync function fetchLoginInfo(loginInfoURL) { \n  const callback = arguments[arguments.length - 1];\n  const res = await (await fetch(loginInfoURL, {})).json();\n  if (res?.code === \"SUCCESS\") {\n    callback({\n      code: 0,\n      data: res?.data,\n      message:res?.msg\n    });\n  } else { \n    callback({\n      code: -1,\n      data: null,\n      message:res?.msg\n    });\n  }\n}\nasync function fetchLoginOut(loginOutURL) {\n  const callback = arguments[arguments.length - 1];\n  await (await fetch(loginOutURL, {}));\n  callback();\n}\n\n\n\n\n\n\n\n", "autoLoginScriptHeadLess": "const { Builder, By, until, logging, Actions, Key } = require('selenium-webdriver');\nconst { Options, ServiceBuilder } = require('selenium-webdriver/chrome');\n\nlet account = null;\nlet password = null;\n\nconst timeOut = 10*1000;//10s没请求到就退出\nconst shopline_login_url = 'https://admin.myshopline.com/user/signIn';\n\nconst loginSuccess = 'https://admin.myshopline.com/stores/list';\n\nconst loginInfoURL = 'https://admin.myshopline.com/api/merchant/merchants';\nconst loginOutURL = 'https://admin.myshopline.com/udb/lgn/login/logout.do';\n\n\nmodule.exports =  async (context) => { \n  let { driver, args, options } = context;\n  console.time('shopline:login');\n  account = args.account;\n  await driver.get(shopline_login_url);\n  let cookies = await driver.manage().getCookies() || [];\n  //通过cookie判断是否跳过登录\n  const res = cookies.find(v => v.domain === '.myshopline.com' && v.name === 'a_osudb_oar');\n  console.log(\"res\",cookies);\n  res && console.log('cookies找到,原本已登录');\n  if (res) {\n    //判断是否是本人\n    let boo = await isSelf(driver);\n    console.log(\"isSelf\", boo);\n    if (boo) {\n      return {\n        code: 0,\n        message: \"登录成功\",\n        data: null\n      }\n    } else {\n      //不是本人，执行退出登录接口\n      console.log(\"不是本人，执行退出登录接口\");\n      await driver.executeAsyncScript(fetchLoginOut, loginOutURL);\n      return {\n        code: -1,\n        message: \"登录失败,请手动登录\",\n        data: null\n      }\n    }\n  } else {\n    await driver.sleep(4000);\n    const accountDOM = await driver.wait(until.elementLocated(By.css('input')), timeOut, '执行超时', 1000);\n    accountDOM.click();\n    console.log(\"res\",accountDOM);\n    console.log(\"res\",await accountDOM.getAttribute(\"class\"));\n    console.log(\"res\",await accountDOM.getAttribute(\"value\"));\n    await driver.findElement(By.css(\"button[type ='submit']\")).click();\n    let currUrlTemp = await driver.getCurrentUrl();\n    console.log(\"currUrlTemp\",currUrlTemp);\n    await driver.wait(async () => { \n      let cookies = await driver.manage().getCookies() || [];\n      //通过cookie判断是否跳过登录\n      return !!cookies.find(v => v.domain === '.myshopline.com' && v.name === 'a_osudb_oar');\n    }, timeOut, '当前账号无法登录', 1000);\n\n    //判断是否是本人\n    let boo = await isSelf(driver);\n    console.log(\"isSelf\", boo);\n    if (boo) {\n      return {\n        code: 0,\n        message: \"登录成功\",\n        data: null\n      }\n    } else {\n       //不是本人，执行退出登录接口\n       console.log(\"执行退出登录接口\");\n       await driver.executeAsyncScript(fetchLoginOut, loginOutURL);\n       return {\n         code: -1,\n         message: \"登录失败,请手动登录\",\n         data: null\n       }\n    }\n  }\n}\nasync function loginProcess(driver) {\n  await driver.sleep(1000);\n  await driver.findElement(By.css(\"button[type ='submit']\")).click();\n    let cookies = await driver.manage().getCookies() || [];\n    //通过cookie判断是否跳过登录\n    const res = cookies.find(v => v.domain === '.myshopline.com' && v.name === 'a_osudb_oar');\n    res && console.log('cookies找到,点击登录成功');\n  return {\n    code: 0,\n    data: null,\n    message: 'OK'\n  };\n}\n//判断是否是本人并退出\nasync function isSelf(driver) {\n    //已经登录\n  await driver.get(loginSuccess);\n    let { code, data } = await driver.executeAsyncScript(fetchLoginInfo, loginInfoURL);\n    if (data && data?.email===account) {\n      return true;\n    } else { \n      return false;\n    }\n}\n\n\nasync function fetchLoginInfo(loginInfoURL) { \n  const callback = arguments[arguments.length - 1];\n  const res = await (await fetch(loginInfoURL, {})).json();\n  if (res?.code === \"SUCCESS\") {\n    callback({\n      code: 0,\n      data: res?.data,\n      message:res?.msg\n    });\n  } else { \n    callback({\n      code: -1,\n      data: null,\n      message:res?.msg\n    });\n  }\n}\nasync function fetchLoginOut(loginOutURL) {\n  const callback = arguments[arguments.length - 1];\n  await (await fetch(loginOutURL, {}));\n  callback();\n}\n\n\n\n\n\n\n\n", "douyinLoginVerificationBreak": "const {\n  log,\n  logInfo,\n  logError\n} = require('@fe-pixel/rpa-node');\nconst {\n  Builder,\n  By,\n  until,\n  logging,\n  Actions,\n  Key\n} = require('selenium-webdriver');\nconst webdriver = require('selenium-webdriver');\n\nconst login_url = 'https://www.tiktok.com';\n\nconst timeOut = 10 * 1000;\n\nconst degAll = 178.378;\nconst widthAll = 271.014;\n\nmodule.exports = async ({\n  args,\n  driver\n}) => {\n\n  let {\n    account,\n    password\n  } = args;\n\n  // account ?? (account = \"mtyo96@163.com\");\n  // password ?? (password = \"avh4750.\");\n\n  await driver.get(login_url);\n\n  await driver.sleep(2000);\n  let cookies = await driver.manage().getCookies() || [];\n  // 通过cookie判断是否跳过登录\n  const res = cookies.find(v => v.name === 'cmpl_token');\n  logInfo(\"正在检测登录状态\")\n  if (res) {\n    log('cookies找到,原本已登录');\n    log('登录成功');\n    logInfo(\"登录成功\")\n    return {\n      code: 0,\n      message: \"登录成功\",\n      data: null\n    }\n  } else {\n    log('cookies没找到,执行登录程序');\n    logInfo(\"未登录，执行登录程序\")\n    //top-login-button\n    const loginDom = await driver.wait(until.elementLocated(By.css(`[data-e2e='top-login-button']`)), timeOut, '执行超时', 1000);\n    loginDom.click();\n    //点击账户的方式\n    const zhanghuDom = await driver.wait(until.elementLocated(By.css(`[href=\"/login/phone-or-email\"]`)), timeOut, '执行超时', 1000);\n    zhanghuDom.click();\n\n    //使用电子邮件\n    const emailDom = await driver.wait(until.elementLocated(By.css(`[href=\"/login/phone-or-email/email\"]`)), timeOut, '执行超时', 1000);\n    emailDom.click();\n\n    //账户填充\n    // const accountDom = await driver.wait(until.elementLocated(By.css(`input[name=\"username\"]`)), timeOut, '执行超时', 1000);\n    // await accountDom.clear()\n    // await accountDom.sendKeys(account);\n    // await driver.sleep(1000);\n    // //密码填充\n    // const passwordDom = await driver.wait(until.elementLocated(By.css(`input[type=\"password\"]`)), timeOut, '执行超时', 1000);\n    // await passwordDom.clear()\n    // await passwordDom.sendKeys(password);\n\n    //提交\n    log(\"等待4s\")\n    await driver.sleep(4000);\n    const submitDom = await driver.wait(until.elementLocated(By.css(`button[data-e2e=\"login-button\"]`)), timeOut, '执行超时', 1000);\n    await submitDom.click();\n    log('点击登录');\n    logInfo(\"点击登录\")\n\n    let dom2 = await driver.wait( until.elementLocated(By.css('.secsdk-captcha-drag-icon')), 150000, '执行超时', 1000);\n\n    let actions = driver.actions({async: true})\n  \n    log('开始计算拖动位置')\n    await driver.executeAsyncScript(function () { \n      const callback = arguments[arguments.length - 1];\n      let input = document.createElement(\"input\");\n      input.id = \"65e57edc-3b71-4b49-b096-0a5905141cfe\";\n      input.value = \"0\";\n      input.style = \"font-size:12px\"\n      let content = document.querySelector(\".captcha_verify_container\");\n      content.append(input);\n      let input2 = document.createElement(\"input\");\n      input2.id = \"65e57edc-3b71-4b49-b096-0a5905141cfe-2\";\n      input2.value = \"N\";\n      input2.style = \"width:20px;font-size:12px\";\n      content.append(input2);\n      callback()\n    });\n\n  \n    await driver.wait(async () => {\n      try {\n      let value = await driver.findElement(By.id(\"65e57edc-3b71-4b49-b096-0a5905141cfe-2\")).getAttribute(\"value\");\n        return value === \"Y\";\n      } catch (error) {\n        return false\n      }\n    }, 9999999, '执行超时', 1000);\n  \n    let dom3 = await driver.findElement(By.id(\"65e57edc-3b71-4b49-b096-0a5905141cfe\"));\n    let distance = (await dom3.getAttribute(\"value\") || 0)*1;\n    log(distance);\n    await driver.sleep(1000);\n    //把鼠标移动到滑块上, 然后点击\n    await actions.move({\n      origin: dom2,\n      duration: 1000\n    }).pause(100).press().move({\n      origin: dom2,\n      x: 1,\n      duration: 10\n    }).pause(300).perform();\n    var arr = getTrack(distance + 22)\n    log(arr);\n    var backArr =  [-4,-5,-6,-4,-2,-1]\n    await moveTrack(driver,arr, backArr);\n  \n    // await actions.move({\n    //   origin: dom2,\n    //   duration: 1000\n    // }).pause(100).press().move({\n    //   origin: dom2,\n    //   x: value/2,\n    //   duration: 2000\n    // }).pause(100).move({\n    //   origin: dom2,\n    //   x: value,\n    //   duration: 3000\n    // }).release().perform();\n    log('拖动完成')\n\n    //\n    // await driver.wait(async () => {\n    //   let cookies = await driver.manage().getCookies() || [];\n    //   //通过cookie判断是否跳过登录\n    //   return !!cookies.find(v => v.name === 'cmpl_token');\n    // }, timeOut, '登录超时', 1000);\n    await driver.sleep(10000000);\n    log('登录程序执行成功');\n    logInfo(\"登录程序执行成功\")\n    return {\n      code: 0,\n      message: \"登录成功\",\n      data: null\n    }\n  }\n}\n\n\n\nasync function moveTrack(driver,arr,backArr){\n  let actions = driver.actions({bridge: true})\n\n  for(i=0;i<arr.length;i++){\n    var random = Math.floor(Math.random()*200+30)\n    await actions.move({\n      origin: webdriver.Origin.POINTER,\n      x:arr[i],\n      duration:random\n    })\n  }\n\n\n  await actions.pause(100)\n\n  for(i=0;i<backArr.length;i++){\n\n    var random = Math.floor(Math.random()*200+30)\n    await actions.move({\n      origin: webdriver.Origin.POINTER,\n      x:backArr[i],\n      duration:random\n    })\n  }\n\n\n  await actions.release().perform()\n}\n\n\n//取模拟拖动滑块的数据\n//用等差数列代替了匀加速运动\n//因为匀加速运动取得的小数经过四舍五入会出现不精确，导致拖动的距离出差错\nfunction getTrack(distance){\n\tvar track = [],d=2,n=0,s=0,S=0\n\twhile(S<distance){\n\t\ts=1+n;\n\t\tn=n+d;\n\t\tS+=s;\n\t\ttrack.push(s)\n\t}\n\n\tvar diff = (S - distance);\n\ttrack.splice(-1,1,Math.round(Number(track.slice(-1))-diff))\n\n\treturn track;\n}", "executeDemo": "module.exports = async (context) => {\n  let { args, driver } = context;\n  const { log, logInfo, logError } = require('@fe-pixel/rpa-node');\n  const { Builder, By, until } = require('selenium-webdriver');\n  log(Math.random());\n  await driver.sleep(1000);\n  log(\"我是一个比较长的日志文本我是一个比较长的日志文本我是一个比较长的日志文本我是一个比较长的日志文本我是一个比较长的日志文本我是一个比较长的日志文本我是一个比较长的日志文本我是一个比较长的日志文本我是一个比较长的日志文本\");\n  \n  await driver.sleep(1000);\n  logInfo(args.log);\n  await driver.sleep(1000);\n  log(args.log);\n  await driver.sleep(1000);\n  logInfo(args.log);\n  // logError(\"执行失败\");\n  let arr = new Array(10).fill(\"\");\n  for (let i = 0; i < arr.length; i++) {\n    await driver.sleep(500);\n    log(Math.random());\n  }\n  await driver.sleep(1000);\n  logInfo(Math.random());\n  return {\n    code: 0,\n    data: args.log,\n    message: \"ok\"\n  };\n}", "executeFail": "module.exports = async (context) => {\n  const { Builder, By, until } = require(\"selenium-webdriver\");\n  let { \n    driver,\n    args,\n    options\n  } = context;\n  await driver.get(args.openUrl);\n  let searchText = args.keyword;\n  let searchEdit = driver.findElement(By.id(\"kw\"));\n\n  await new Promise((res) => setTimeout(res, 5000));\n  let res = await driver.executeScript(\"return arguments[0].value;\", searchEdit, searchText);\n  if (res === \"true\") { \n    return {\n      code: 0,\n      data: \"脚本2,命中正确值\",\n      message: \"ok\"\n    };\n  }\n  return {\n    code: -1,\n    data: \"脚本2\",\n    message: \"ok\"\n  };\n};\n\n\n", "executeFailFN": "module.exports = async (context) => {\n  const { Builder, By, until } = require(\"selenium-webdriver\");\n  let { \n    driver,\n    args,\n    options\n  } = context;\n  await driver.get(\"https://www.baidu.com/\");\n  let searchText = args.keyword;\n  let searchEdit = driver.findElement(By.id(\"kw\"));\n\n  await new Promise((res) => setTimeout(res, 5000));\n  let res = await driver.executeScript(\"return arguments[0].value;\", searchEdit, searchText);\n  if (res === \"true\") { \n    return {\n      code: 0,\n      data: \"脚本2,命中正确值\",\n      message: \"ok\"\n    };\n  }\n  return {\n    code: -1,\n    data: \"脚本2\",\n    message: \"ok\"\n  };\n} ;", "helloWorld": "module.exports = async (context) => {\n  const { Builder, By, until } = require(\"selenium-webdriver\");\n  let { \n    driver,\n    args,\n    options\n  } = context;\n  await driver.get(args.openUrl);\n  let searchText = args.keyword;\n  let searchEdit = driver.findElement(By.id(\"kw\"));\n  driver.executeScript(\"arguments[0].value=arguments[1];\", searchEdit, searchText);\n  await new Promise((res) => setTimeout(res, 1000));\n  let search = await driver.findElement(By.id(\"su\"));\n  driver.executeScript(\"arguments[0].click();\", search);\n  await new Promise((res) => setTimeout(res, 5000));\n  return {\n    code: 0,\n    data: \"\",\n    message: \"ok\"\n  };\n} ", "jiyanVerificationBreak": "const {\n  log,\n  logInfo,\n  logError\n} = require('@fe-pixel/rpa-node');\nconst {\n  Builder,\n  By,\n  until,\n  logging,\n  Actions,\n  Key,\n  capabilities\n} = require('selenium-webdriver');\nconst webdriver = require('selenium-webdriver');\n\n\n\nconst timeOut = 10 * 1000;\nmodule.exports = async ({\n  args,\n  driver\n}) => {\n\n  await driver.get(\"https://www.geetest.com/demo/slide-bind.html\");\n  //*[@id=\"btn\"]   /html/body/div/div[2]/div[6]/div/div[1]/div[2]/div[2]\n  let dom = await driver.findElement(By.id(\"btn\"));\n  await driver.sleep(2000);\n  console.log(\"dom\",dom);\n  await dom.click();\n  let dom2 = await driver.wait( until.elementLocated(By.css('.geetest_slider_button')), 15000, '执行超时', 1000);\n\n  let actions = driver.actions({async: true})\n\n\tlog('开始计算拖动位置')\n  await driver.executeAsyncScript(function () { \n    const callback = arguments[arguments.length - 1];\n    let input = document.createElement(\"input\");\n    input.id = \"65e57edc-3b71-4b49-b096-0a5905141cfe\";\n    input.value = \"0\";\n    let content = document.querySelector(\".geetest_panel_next .geetest_embed .geetest_panel\");\n    content.append(input);\n    let input2 = document.createElement(\"input\");\n    input2.id = \"65e57edc-3b71-4b49-b096-0a5905141cfe-2\";\n    input2.value = \"N\";\n    input2.style = \"width:20px\";\n    content.append(input2);\n    callback()\n  });\n  await driver.wait(async () => {\n    try {\n    let value = await driver.findElement(By.id(\"65e57edc-3b71-4b49-b096-0a5905141cfe-2\")).getAttribute(\"value\");\n      return value === \"Y\";\n    } catch (error) {\n      return false\n    }\n  }, 9999999, '执行超时', 1000);\n\n  let dom3 = await driver.findElement(By.id(\"65e57edc-3b71-4b49-b096-0a5905141cfe\"));\n  let distance = (await dom3.getAttribute(\"value\") || 0)*1;\n  log(distance);\n  await driver.sleep(1000);\n\t//把鼠标移动到滑块上, 然后点击\n  await actions.move({\n    origin: dom2,\n    duration: 1000\n  }).pause(100).press().move({\n    origin: dom2,\n    x: 1,\n    duration: 10\n  }).pause(300).perform();\n  var arr = getTrack(distance + 22)\n  log(arr);\n  var backArr =  [-4,-5,-6,-4,-2,-1]\n  await moveTrack(driver,arr, backArr);\n\n  // await actions.move({\n  //   origin: dom2,\n  //   duration: 1000\n  // }).pause(100).press().move({\n  //   origin: dom2,\n  //   x: value/2,\n  //   duration: 2000\n  // }).pause(100).move({\n  //   origin: dom2,\n  //   x: value,\n  //   duration: 3000\n  // }).release().perform();\n\n  await driver.sleep(5000);\n  log('拖动完成')\n    return {\n      code: 0,\n      message: \"登录成功\",\n      data: null\n    }\n  \n\n    \n  \n}\n\nasync function moveTrack(driver,arr,backArr){\n  let actions = driver.actions({bridge: true})\n\n  for(i=0;i<arr.length;i++){\n    var random = Math.floor(Math.random()*200+30)\n    await actions.move({\n      origin: webdriver.Origin.POINTER,\n      x:arr[i],\n      duration:random\n    })\n  }\n\n\n  await actions.pause(100)\n\n  for(i=0;i<backArr.length;i++){\n\n    var random = Math.floor(Math.random()*200+30)\n    await actions.move({\n      origin: webdriver.Origin.POINTER,\n      x:backArr[i],\n      duration:random\n    })\n  }\n\n\n  await actions.release().perform()\n}\n\n\n//取模拟拖动滑块的数据\n//用等差数列代替了匀加速运动\n//因为匀加速运动取得的小数经过四舍五入会出现不精确，导致拖动的距离出差错\nfunction getTrack(distance){\n\tvar track = [],d=2,n=0,s=0,S=0\n\twhile(S<distance){\n\t\ts=1+n;\n\t\tn=n+d;\n\t\tS+=s;\n\t\ttrack.push(s)\n\t}\n\n\tvar diff = (S - distance);\n\ttrack.splice(-1,1,Math.round(Number(track.slice(-1))-diff))\n\n\treturn track;\n}\n\n", "manualADGoogle": "const {\n\tBuilder,\n\tBy,\n\tuntil,\n\tKey,\n\tlogging,\n\tActions,\n} = require(\"selenium-webdriver\");\n\nconst {\n\tOptions,\n\tServiceBuilder\n} = require('selenium-webdriver/chrome')\n\n\nconst {\n\tlog,\n\tlogInfo,\n\tlogError\n} = require(\"@fe-pixel/rpa-node\");\n\nlet account = null;\nlet password = null;\nconst timeOut = 600 * 5 * 1000;\nconst login_url = 'https://ads.google.com/nav/login?hl=zh';\n\n\nmodule.exports = async (context) => {\n\n\tlet {\n\t\tdriver,\n\t\targs,\n\t\toptions\n\t} = context;\n\n\taccount = args.account;\n\tawait driver.get(login_url);\n  await driver.sleep(5000);\n  // await driver.findElement(By.css('.qhFLie button')).click();\n  const nextDom = await driver.wait(until.elementLocated(By.css(`.qhFLie button`)), timeOut, '执行超时', 1000);\n  nextDom.click();\n\tawait driver.wait(async () => {\n\t\tlet url = await driver.getCurrentUrl();\n\n\t\tlet urlparam = url.split('?')[0];\n\n\t\tif (urlparam.indexOf('selectaccount') >= 0) {\n\t\t\treturn true;\n\t\t}\n\t}, timeOut, '登录超时', 1000);\n\treturn {\n\t\tcode: 0,\n\t\tmessage: \"登录成功\",\n\t\tdata: null\n\t}\n}\n", "manualLoginBaidu": "const {\n  Builder,\n  By,\n  until,\n  logging,\n  Actions,\n  Key\n} = require('selenium-webdriver');\nconst {\n  Options,\n  ServiceBuilder\n} = require('selenium-webdriver/chrome');\n\nlet account = null;\nlet password = null;\nconst timeOut = 60 * 5 * 1000; //10s没请求到就退出\nconst login_url = 'https://www.tiktok.com';\n\nmodule.exports = async (context) => {\n  const {\n    log,\n    logInfo,\n    logError\n  } = require('@fe-pixel/rpa-node');\n\n  let {\n    driver,\n    args,\n    options\n  } = context;\n  account = args.account;\n  await driver.get(login_url);\n  let cookies = await driver.manage().getCookies() || [];\n  //通过cookie判断是否跳过登录\n  const res = cookies.find(v => v.name === 'cmpl_token');\n  if (res) {\n    log('cookies找到,原本已登录');\n    //判断是否是本人\n    return {\n      code: 0,\n      message: \"登录成功\",\n      data: null\n    }\n  } else {\n    log('cookies没找到,执行登录程序');\n    await driver.wait(async () => {\n      let cookies = await driver.manage().getCookies() || [];\n      //通过cookie判断是否跳过登录\n      return !!cookies.find(v => v.name === 'cmpl_token');\n    }, timeOut, '登录超时', 1000);\n    log('登录成功');\n    return {\n      code: 0,\n      message: \"登录成功\",\n      data: null\n    }\n  }\n}", "manualLoginDouyin": "const { Builder, By, until, logging, Actions, Key } = require('selenium-webdriver');\nconst { Options, ServiceBuilder } = require('selenium-webdriver/chrome');\n\nlet account = null;\nlet password = null;\nconst timeOut = 60 * 5 * 1000;\nconst login_url = 'https://www.tiktok.com';\n\nmodule.exports = async (context) => {\n  const { log, logInfo, logError } = require('@fe-pixel/rpa-node');\n\n  let { driver, args, options } = context;\n  account = args.account;\n  await driver.get(login_url);\n  let cookies = await driver.manage().getCookies() || [];\n  //通过cookie判断是否跳过登录\n  const res = cookies.find(v=> v.name === 'cmpl_token');\n  res && log('cookies找到,原本已登录');\n  if (res) {\n    return {\n      code: 0,\n      message: \"登录成功\",\n      data: null\n    }\n  } else {\n    log('等待监听cookie');\n    await driver.wait(async () => { \n      let cookies = await driver.manage().getCookies() || [];\n      //通过cookie判断是否跳过登录\n      return !!cookies.find(v =>v.name === 'cmpl_token');\n    }, timeOut, '登录超时', 1000);\n    return {\n      code: 0,\n      message: \"登录成功\",\n      data: null\n    }\n  }\n}\n\n\n\n\n\n\n\n", "manualLoginScript": "const { Builder, By, until, logging, Actions, Key } = require('selenium-webdriver');\nconst { Options, ServiceBuilder } = require('selenium-webdriver/chrome');\n\nlet account = null;\nlet password = null;\n\nconst timeOut = 60 * 5 * 1000;//5分钟没请求到就退出\nconst shopline_login_url = 'https://admin.myshopline.com/user/signIn';\n\nconst loginSuccess = 'https://admin.myshopline.com/stores/list';\n\nconst loginInfoURL = 'https://admin.myshopline.com/api/merchant/merchants';\nconst loginOutURL = 'https://admin.myshopline.com/udb/lgn/login/logout.do';\n\n\nlet result = {\n  code: -1,\n  data: null,\n  message: '未命中脚本,请手动登录',\n}\nmodule.exports = async (context) => {\n  let { driver, args, options } = context;\n  console.time('shopline:login');\n  account = args.account;\n  await driver.get(shopline_login_url);\n  let cookies = await driver.manage().getCookies() || [];\n  //通过cookie判断是否跳过登录\n  const res = cookies.find(v => v.domain === '.myshopline.com' && v.name === 'a_osudb_oar');\n  res && console.log('cookies找到,原本已登录');\n  if (res) {\n    //判断是否是本人\n    let boo = await isSelf(driver);\n    console.log(\"isSelf\", boo);\n    if (boo) {\n      return {\n        code: 0,\n        message: \"登录成功\",\n        data: null\n      }\n    } else {\n      //不是本人，执行退出登录接口\n      console.log(\"不是本人，执行退出登录接口\");\n      await driver.executeAsyncScript(fetchLoginOut, loginOutURL);\n      //跳转登录页面等待用户登录\n      await driver.get(shopline_login_url);\n      await driver.wait(async () => {\n        let cookies = await driver.manage().getCookies() || [];\n        //通过cookie判断是否跳过登录\n        return !!cookies.find(v => v.domain === '.myshopline.com' && v.name === 'a_osudb_oar');\n      }, timeOut, '执行超时', 1000);\n      //判断是否是本人\n      let boo = await isSelf(driver);\n      console.log(\"isSelf\", boo);\n      if (boo) {\n        return {\n          code: 0,\n          message: \"登录成功\",\n          data: null\n        }\n      } else {\n        //不是本人，执行退出登录接口\n        console.log(\"执行退出登录接口\");\n        await driver.executeAsyncScript(fetchLoginOut, loginOutURL);\n        return {\n          code: -1,\n          message: \"登录账号不匹配，请核对账号重试\",\n          data: null\n        }\n      }\n    }\n  } else {\n    await driver.wait(async () => {\n      let cookies = await driver.manage().getCookies() || [];\n      //通过cookie判断是否跳过登录\n      return !!cookies.find(v => v.domain === '.myshopline.com' && v.name === 'a_osudb_oar');\n    }, timeOut, '执行超时', 1000);\n\n    //判断是否是本人\n    let boo = await isSelf(driver);\n    console.log(\"isSelf\", boo);\n    if (boo) {\n      return {\n        code: 0,\n        message: \"登录成功\",\n        data: null\n      }\n    } else {\n      //不是本人，执行退出登录接口\n      console.log(\"执行退出登录接口\");\n      await driver.executeAsyncScript(fetchLoginOut, loginOutURL);\n      return {\n        code: -1,\n        message: \"登录账号不匹配，请核对账号重试\",\n        data: null\n      }\n    }\n  }\n}\n\n//判断是否是本人并退出\nasync function isSelf(driver) {\n  //已经登录\n  await driver.get(loginSuccess);\n  let { code, data } = await driver.executeAsyncScript(fetchLoginInfo, loginInfoURL);\n  if (data && data?.email===account) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\nasync function fetchLoginInfo(loginInfoURL) {\n  const callback = arguments[arguments.length - 1];\n  const res = await (await fetch(loginInfoURL, {})).json();\n  if (res?.code === \"SUCCESS\") {\n    callback({\n      code: 0,\n      data: res?.data,\n      message: res?.msg\n    });\n  } else {\n    callback({\n      code: -1,\n      data: null,\n      message: res?.msg\n    });\n  }\n}\nasync function fetchLoginOut(loginOutURL) {\n  const callback = arguments[arguments.length - 1];\n  await (await fetch(loginOutURL, {}));\n  callback();\n}", "openUrl": "module.exports = async (context) => { \n  let {driver,args,options} = context;\n  await driver.get(args.openUrl);\n  return {\n    code:0,\n    data:null,\n    message: \"success\",\n    isKeepOpen:true\n  };\n}\n\n\n", "shoplineAuth": "const { Builder, By, until, logging, Actions, Key } = require('selenium-webdriver');\nconst { Options, ServiceBuilder } = require('selenium-webdriver/chrome');\nconst crypto = require('crypto');\n\nlet shopline_admin_url = null;\n\n\nlet result = {\n  code: -1,\n  data: null,\n  message: '未命中脚本,请手动登录',\n};\n\n\n\nmodule.exports =  async (context) => { \n  let {driver,args,options} = context;\n  result = await shopline_auth({ driver, args, result });\n  return result;\n}\n\n\n\nasync function shopline_auth({ driver,result,args}){\n  console.time('shopline:auth');\n  shopline_admin_url = args.admin_url;\n  const timeOut = 10000;//10s没请求到就退出\n  //Array.from(document.querySelectorAll(\"tbody tr td:nth-last-child(2)>span\")).map(v=>~v.innerText.indexOf('\\n')?v.innerText.slice(0,-1):v.innerText).join(\",\")\n  // https://zzshopline.myshopline.com/admin/\n  //https://developer.myshopline.com/docs/introduce/NOAkhsPT\n\n  const shopline_admin_authorize = 'oauth-web/#/oauth/authorize?appKey=ef1df4c9542c215dc539c586eaf43c8336a055d5&responseType=code&scope=read_customers,read_discounts,read_draft_orders,read_inventory,read_metafileds,read_orders,read_page,read_price_rules,read_products,read_script_tags,read_themes,read_store_information,read_store_metrics,read_marketing_event,read_payment&redirectUri=https://www.shopline.com';\n\n  const shopline_admin_create_url = 'oauth/token/create';\n  const secret = 'd2023951825727f79aa67d175fd1a01f62c49755';\n  const create_headers = {\n    'content-type': 'application/json;charset=UTF-8',\n    appkey: 'ef1df4c9542c215dc539c586eaf43c8336a055d5',\n    sign: '',\n    timestamp: '1655864538757',\n  };\n  let create_body = JSON.stringify({\n    code: 'us50d35ea3235bfb9c141174f4b9ea8ee7fd0c00ef',\n  });\n\n  try {\n    await driver.get(shopline_admin_url);\n    //判断是否过期\n    let currUrlTemp = await driver.getCurrentUrl();\n    if (currUrlTemp !== shopline_admin_url) {\n      result = {\n        code: -1,\n        data: null,\n        message: '该店铺异常,请核查~',\n      }\n      return;\n    }\n    await driver.get(shopline_admin_url + shopline_admin_authorize);\n    await new Promise((res) => new setTimeout(res, 4000));\n    const currCurl = await driver.getCurrentUrl();\n    console.log(\"currCurl\", currCurl);\n    console.log(\"currCurl\", (shopline_admin_url + shopline_admin_authorize) === currCurl);\n    if ((shopline_admin_url + shopline_admin_authorize) === currCurl) {\n      console.log(\"A\");\n      let authDom = await driver.wait( until.elementLocated(By.css('main button.ant-btn-primary')), timeOut, '执行超时', 1000);\n      console.log(\"authDom\", authDom);\n      await authDom.click();\n    } else {\n      console.log(\"B\");\n      //点击后还会跳转走下面逻辑\n      await driver.wait(async () => {\n        console.count(\"timeB-agin\");\n        const currCurl = await driver.getCurrentUrl();\n        return currCurl !== (shopline_admin_url + shopline_admin_authorize);\n      }, timeOut, '执行超时', 1000);\n    }\n    const currUrl = await driver.getCurrentUrl();\n    await driver.get(shopline_admin_url);\n\n\n    /**\n{\n  appkey: 'ef1df4c9542c215dc539c586eaf43c8336a055d5',\n  code: 'us5b1e88760b1423ca78e0798e35617fe0a9b49560',\n  handle: 'zzshopline',\n  timestamp: '1656061350581',\n  sign: 'ce97539f10241d358017aee093fa0d1dd9fa5848bdaa802d23f4ff5000f298b0'\n}\n     */\n    const params = getJSONByURL(currUrl);\n    console.log(\"currUrl\",currUrl);\n    console.log(\"params\",params);\n    create_body = JSON.stringify({ code: params.code });\n    const timestamp = Date.now();\n    const hmac = crypto.createHmac('sha256', secret);\n    hmac.update(create_body + timestamp);\n    create_headers.sign = hmac.digest('hex');\n    create_headers.timestamp = timestamp;\n    result = await driver.executeAsyncScript(fetchCreate, shopline_admin_create_url, create_headers, create_body);\n  } catch (error) {\n    result.code = -3;\n    result.message = error.toString();\n  } finally {\n    console.timeEnd('shopline:auth');\n    return result;\n  }\n};\n\nasync function fetchCreate( shopline_admin_create_url, create_headers, create_body) {\n  const callback = arguments[arguments.length - 1];\n  const res = await (await fetch(shopline_admin_create_url, {\n    method: 'POST',\n    headers: create_headers,\n    body:create_body\n  })).json();\n  if (res?.code === 200) {\n    callback({\n      code: 0,\n      data: res?.data,\n      message:res?.message\n    });\n  } else { \n    callback({\n      code: 1,\n      data: null,\n      message:res?.message\n    });\n  }\n}\n\n\nfunction getJSONByURL(params) {\n  const index = params.indexOf('?');\n  if (!~index) return {};\n  params = params.slice(index + 1);\n  const res = {};\n  for (const item of params.split('&')) {\n    const [key, val] = item.split('=');\n    res[key] = val;\n  }\n  return res;\n}\n\nexports.shopline_auth = shopline_auth;\n\n\n\n", "shoplineAuthOther": "const { Builder, By, until, logging, Actions, Key } = require('selenium-webdriver');\nconst { Options, ServiceBuilder } = require('selenium-webdriver/chrome');\nconst { log, logInfo, logError } = require('@fe-pixel/rpa-node');\n\n\nconst crypto = require('crypto');\n\n\n\nlet result = {\n  code: -1,\n  data: null,\n  message: '未命中脚本,请手动登录',\n};\n\n\n\nmodule.exports =  async (context) => { \n  let {driver,args,options} = context;\n  result = shoplineAuthOther({driver,args,result});\n  return result;\n}\n\n\nasync function shoplineAuthOther({ driver,result,args}){\n  console.time('shopline:auth');\n  let shopline_admin_url = args.admin_url;\n  let appKey = args.appKey;\n  let secret = args.secret;\n  let scope = args.scope || \"read_customers,read_discounts,read_draft_orders,read_inventory,read_metafileds,read_orders,read_page,read_price_rules,read_products,read_script_tags,read_themes,read_store_information,read_store_metrics,read_marketing_event,read_payment\";\n  let redirectUri = args.redirectUri || \"https://www.baidu.com\";\n  const timeOut = 10000;//10s没请求到就退出\n  //Array.from(document.querySelectorAll(\"tbody tr td:nth-last-child(2)>span\")).map(v=>~v.innerText.indexOf('\\n')?v.innerText.slice(0,-1):v.innerText).join(\",\")\n  // https://zzshopline.myshopline.com/admin/\n  //https://developer.myshopline.com/docs/introduce/NOAkhsPT\n  \n  const shopline_admin_authorize = `oauth-web/#/oauth/authorize?appKey=${appKey}&responseType=code&scope=${scope}&redirectUri=${redirectUri}`;\n\n  const shopline_admin_create_url = 'oauth/token/create';\n  const create_headers = {\n    'content-type': 'application/json;charset=UTF-8',\n    appkey:appKey,\n    sign: '',\n    timestamp: '',\n  };\n\n  try {\n    await driver.get(shopline_admin_url);\n    log(\"判断店铺是否异常，过期，冻结等\");\n    logInfo(\"检查账号情况\");\n    //判断是否过期\n    let currUrlTemp = await driver.getCurrentUrl();\n    if (currUrlTemp !== shopline_admin_url) {\n      result = {\n        code: -1,\n        data: null,\n        message: '该店铺异常,请核查~',\n      }\n      return;\n    }\n    logInfo(\"检查账号-正常\");\n\n    logInfo(\"进行授权\");\n    await driver.get(shopline_admin_url + shopline_admin_authorize);\n\n    logInfo(\"进行重定向\");\n    await new Promise((res) => new setTimeout(res, 4000));\n    const currCurl = await driver.getCurrentUrl();\n    console.log(\"currCurl\", currCurl);\n    if ((shopline_admin_url + shopline_admin_authorize) === currCurl) {\n      console.log(\"A\");\n      let authDom = await driver.wait( until.elementLocated(By.css('main button.ant-btn-primary')), timeOut, '执行超时', 1000);\n      console.log(\"authDom\", authDom);\n      await authDom.click();\n    } else {\n      console.log(\"B\");\n      //点击后还会跳转走下面逻辑\n      await driver.wait(async () => {\n        console.count(\"timeB-agin\");\n        const currCurl = await driver.getCurrentUrl();\n        return currCurl !== (shopline_admin_url + shopline_admin_authorize);\n      }, timeOut, '执行超时', 1000);\n    }\n    logInfo(\"重定向成功\");\n    const currUrl = await driver.getCurrentUrl();\n    await driver.get(shopline_admin_url);\n    const params = getJSONByURL(currUrl);\n    console.log(\"currUrl\",currUrl);\n    console.log(\"params\",params);\n    let create_body = JSON.stringify({ code: params.code });\n    const timestamp = Date.now();\n    const hmac = crypto.createHmac('sha256', secret);\n    hmac.update(create_body + timestamp);\n    create_headers.sign = hmac.digest('hex');\n    create_headers.timestamp = timestamp;\n    logInfo(\"获取令牌\");\n    result = await driver.executeAsyncScript(fetchCreate, shopline_admin_create_url, create_headers, create_body);\n    logInfo(\"授权成功\");\n  } catch (error) {\n    result.code = -1;\n    result.message = error.toString();\n  } finally {\n    console.timeEnd('shopline:auth');\n    return result;\n  }\n};\n\nasync function fetchCreate( shopline_admin_create_url, create_headers, create_body) {\n  const callback = arguments[arguments.length - 1];\n  const res = await (await fetch(shopline_admin_create_url, {\n    method: 'POST',\n    headers: create_headers,\n    body: create_body\n  })).json();\n  if (res?.code === 200) {\n    callback({\n      code: 0,\n      data: res?.data,\n      message:res?.message\n    });\n  } else { \n    callback({\n      code: -1,\n      data: null,\n      message:res?.message\n    });\n  }\n}\n\n\nfunction getJSONByURL(params) {\n  const index = params.indexOf('?');\n  if (!~index) return {};\n  params = params.slice(index + 1);\n  const res = {};\n  for (const item of params.split('&')) {\n    const [key, val] = item.split('=');\n    res[key] = val;\n  }\n  return res;\n}\n\nexports.shoplineAuthOther = shoplineAuthOther;\n\n\n\n", "shoplineList": "const { Builder, By, until, logging, Actions, Key } = require('selenium-webdriver');\nconst { Options, ServiceBuilder } = require('selenium-webdriver/chrome');\n\n\nlet result = {\n  code: -1,\n  data: null,\n  message: '未命中脚本,请手动登录',\n};\n\n\n\nmodule.exports =  async (context) => { \n  let {driver,args,options} = context;\n  result = shopline_list({driver,result});\n  return result;\n}\n\n\nasync function shopline_list({ driver,result}){\n  console.time('shopline:list');\n  const timeOut = 10000;//10s没请求到就退出\n  const shopline_list_url = 'https://admin.myshopline.com/stores/list';\n  const shopline_list_fetchURL = 'https://admin.myshopline.com/api/merchant/stores/list?pageSize=999&pageNum=1&dataDisplayMode=ACTIVATED_LIST';\n\n  try {\n    await driver.get(shopline_list_url);\n    result = await driver.executeAsyncScript(fetchShopList, shopline_list_fetchURL);\n    console.log(\"result-start\",JSON.stringify(result));\n    console.log(\"result-end\");\n  } catch (error) {\n    result.code = -2;\n    result.message = error;\n  } finally {\n    console.timeEnd('shopline:list');\n    return result;\n  }\n}\n\n\nasync function fetchShopList(shopline_list_fetchURL) { \n    const callback = arguments[arguments.length - 1];\n    const res = await (await fetch(shopline_list_fetchURL, {})).json();\n    if (res?.code === \"SUCCESS\") {\n      callback({\n        code: 0,\n        data: res?.data,\n        message:res?.msg\n      });\n    } else { \n      callback({\n        code: -1,\n        data: null,\n        message:res?.msg\n      });\n    }\n}\nexports.shopline_list = shopline_list;\n\n", "shoplineLogin": "const { Builder, By, until, logging, Actions, Key } = require('selenium-webdriver');\r\nconst { Options, ServiceBuilder } = require('selenium-webdriver/chrome');\r\n\r\nlet account = null;\r\nlet password = null;\r\n\r\nconst timeOut = 10000;//10s没请求到就退出\r\nconst shopline_login_url = 'https://admin.myshopline.com/user/signIn';\r\n\r\nconst loginSuccess = 'https://admin.myshopline.com/stores/list';\r\n\r\nconst loginInfoURL = 'https://admin.myshopline.com/api/merchant/staffs/merchant/email/list';\r\n\r\nlet result = {\r\n  code: -1,\r\n  data: null,\r\n  message: '未命中脚本,请手动登录',\r\n}\r\nmodule.exports =  async (context) => { \r\n  let { driver, args, options } = context;\r\n  console.time('shopline:login');\r\n  account = args.account;\r\n  password = args.password;\r\n  \r\n  await driver.get(shopline_login_url);\r\n  let cookies = await driver.manage().getCookies() || [];\r\n  //通过cookie判断是否跳过登录\r\n  const res = cookies.find(v => v.domain === '.myshopline.com' && v.name === 'a_osudb_oar');\r\n  res && console.log('cookies找到');\r\n  if (!res) {\r\n    result = await loginProcess(driver);\r\n  } else {\r\n    //已经登录\r\n    await driver.get(loginSuccess);\r\n    let { code,data } = await driver.executeAsyncScript(fetchLoginInfo, loginInfoURL);\r\n    if (code !== 0) return;\r\n    //判断是否是本人登录\r\n    if (data && data.toString() === account) {\r\n      cookies = cookies.map(v => {\r\n        v.expires = v.expiry;\r\n        delete v.expiry;\r\n        return v;\r\n      });\r\n      result = {\r\n        code: 0,\r\n        data: cookies,\r\n        message: '已登录，跳过登录返回',\r\n      };\r\n    } else { \r\n      console.log(\"登录，但不是本人，执行退出登录重新进入\");\r\n      const avatarDOM = await driver.wait(until.elementLocated(By.css('.ant-avatar.ant-avatar-circle.ant-avatar-image')), timeOut, '执行超时', 1000);\r\n      avatarDOM.click();\r\n      await driver.sleep(1000);\r\n      let dom = await driver.findElement(By.css('.ant-dropdown-menu-item.ant-dropdown-menu-item-only-child'));\r\n      if (dom) {\r\n        await dom.click();\r\n        await driver.get(shopline_login_url);\r\n        console.log(\"重新登录上\");\r\n        result = await loginProcess(driver);\r\n        console.log(\"重新登录上\",result);\r\n      }\r\n    }\r\n  }\r\n\r\n  console.timeEnd('shopline:login');\r\n  return result;\r\n}\r\n\r\n\r\nasync function loginProcess(driver) {\r\n  const action = driver.actions({ async: true, bridge: true });\r\n  const cmdCtrl = process.platform === 'win32' ? Key.CONTROL : Key.COMMAND;\r\n  \r\n  const accountDOM = await driver.wait(until.elementLocated(By.css('input')), timeOut, '执行超时', 1000);\r\n  //防止浏览器自动填充\r\n  await accountDOM.click();\r\n  await action.keyDown(cmdCtrl).sendKeys('a').keyUp(cmdCtrl)\r\n    .keyDown(Key.DELETE)\r\n    .perform();\r\n  await accountDOM.sendKeys(account);\r\n  //防止浏览器自动填充\r\n  const passwordDOM = await driver.findElement(By.css(\"input[type='password']\"));\r\n  await passwordDOM.click();\r\n  await action.keyDown(cmdCtrl).sendKeys('a').keyUp(cmdCtrl)\r\n    .keyDown(Key.DELETE)\r\n    .perform();\r\n  await passwordDOM.sendKeys(password);\r\n  await driver.findElement(By.css(\"button[type ='submit']\")).click();\r\n  await driver.wait(async () => { \r\n    let cookies = await driver.manage().getCookies() || [];\r\n    //通过cookie判断是否跳过登录\r\n    return cookies.find(v => v.domain === '.myshopline.com' && v.name === 'a_osudb_oar');\r\n  }, timeOut, '执行超时', 1000);\r\n\r\n  let cookies = await driver.manage().getCookies();\r\n\r\n  cookies = cookies.map(v => {\r\n    v.expires = v.expiry;\r\n    delete v.expiry;\r\n    return v;\r\n  });\r\n  return {\r\n    code: 0,\r\n    data: cookies,\r\n    message: 'OK',\r\n  };\r\n}\r\n\r\n\r\nasync function fetchLoginInfo(loginInfoURL) { \r\n  const callback = arguments[arguments.length - 1];\r\n  const res = await (await fetch(loginInfoURL, {})).json();\r\n  if (res?.code === \"SUCCESS\") {\r\n    callback({\r\n      code: 0,\r\n      data: res?.data,\r\n      message:res?.msg\r\n    });\r\n  } else { \r\n    callback({\r\n      code: 11,\r\n      data: null,\r\n      message:res?.msg\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "shoplineSimpleLogin": "const { Builder, By, until, logging, Actions, Key } = require('selenium-webdriver');\r\nconst { Options, ServiceBuilder } = require('selenium-webdriver/chrome');\r\n\r\nlet account = null;\r\nlet password = null;\r\n\r\nlet timeOut = 3 * 1000;//5分钟执行\r\nconst shopline_login_url = 'https://admin.myshopline.com/user/signIn';\r\nconst loginSuccess = 'https://admin.myshopline.com/stores/list';\r\nconst loginInfoURL = 'https://admin.myshopline.com/api/merchant/staffs/merchant/email/list';\r\n\r\nlet result = {\r\n  code: -1,\r\n  data: null,\r\n  message: '未命中脚本,请手动登录',\r\n}\r\nmodule.exports = async ({ driver, args }) => {\r\n  account = args.account;\r\n  await driver.get(shopline_login_url);\r\n  await new Promise(res=>setTimeout(res,2000))\r\n  let cookies = await driver.manage().getCookies() || [];\r\n  console.log(\"cookies\",cookies);\r\n  //通过cookie判断是否跳过登录\r\n  const res = cookies.find(v => v.domain === '.myshopline.com' && v.name === 'a_osudb_oar');\r\n  console.log(\"res\",res);\r\n  if (!res) { \r\n    return {\r\n      code: -1,\r\n      data: null,\r\n      message: '未登录',\r\n    };\r\n  }\r\n    //已经登录\r\n    await driver.get(loginSuccess);\r\n    let { code, data } = await driver.executeAsyncScript(fetchLoginInfo, loginInfoURL);\r\n    if (code !== 0) return;\r\n    //判断是否是本人登录\r\n    if (data && ~data.toString().indexOf(account)) {\r\n      result = {\r\n        code: 0,\r\n        data: \"\",\r\n        message: '已登录',\r\n      };\r\n    } else {\r\n      result = {\r\n        code: -1,\r\n        data: \"\",\r\n        message: '该账号已登录，不是本人,请重新手动登录',\r\n      };\r\n  }\r\n  return result;\r\n}\r\n\r\n\r\n\r\nasync function fetchLoginInfo(loginInfoURL) {\r\n  const callback = arguments[arguments.length - 1];\r\n  const res = await (await fetch(loginInfoURL, {})).json();\r\n  if (res?.code === \"SUCCESS\") {\r\n    callback({\r\n      code: 0,\r\n      data: res?.data,\r\n      message: res?.msg\r\n    });\r\n  } else {\r\n    callback({\r\n      code: -1,\r\n      data: null,\r\n      message: res?.msg\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "tiktokUpload": "module.exports = async (context) => {\nconst {log,logInfo,logError} = require('@fe-pixel/rpa-node');\n  const {By,Key} = require(\"selenium-webdriver\");\n\n  let {\n    driver,\n    args,\n    options\n  } = context;\n\n  const {\n    openUrl,\n    taskList\n  } = args\n\n  const timeOut = 3 * 60 * 1000\n\n  // 记录成功情况 1：成功， 2：失败\n  let statusArr = taskList.map(item => ({\n    status: 2,\n    time: (new Date()).valueOf()\n  }))\n\n  // 跳转\n  await driver.get(openUrl);\n  // Switch to the frame\n  await driver.switchTo().frame(0);\n  await driver.sleep(3000)\n\n  for (let taskIndex = 0; taskIndex < taskList.length; taskIndex++) {\n    const {\n      title,\n      tags = [],\n      movie\n    } = taskList[taskIndex]\n\n    // 富文本操作\n    await driver.findElement(By.css(\".public-DraftEditor-content\")).click()\n    title && await driver.findElement(By.css(\".public-DraftEditor-content\")).sendKeys(title)\n    await driver.sleep(2000)\n    for (let tagIndex = 0; tagIndex < tags.length; tagIndex++) {\n      await driver.findElement(By.css(\".public-DraftEditor-content\")).sendKeys(`#${tags[tagIndex]}`)\n      await driver.sleep(3000)\n      await driver.findElement(By.css(\".public-DraftEditor-content\")).sendKeys(Key.TAB)\n      await driver.sleep(1000)\n    }\n\n    // 视频\n    await driver.findElement(By.css(\".upload > input[type=file]\")).sendKeys(movie);\n    // 等待视频上传成功\n    await driver.wait(async () => {\n      let value = null\n      try {\n        value = await driver.findElement(By.css(\".bg-container-v2 .empty\"));\n        return false\n      } catch (error) {\n        return true\n      }\n    }, timeOut, '上传视频失败', 1000);\n\n    // 版权\n    await driver.findElement(By.css(\".tiktok-switch\")).click()\n    await driver.wait(async () => {\n      let value = null\n      try {\n        value = await driver.findElement(By.css(\".mb-6\"));\n        if (value) {\n          return true\n        }\n      } catch (error) {\n        return false\n      }\n    }, timeOut, '版权检验失败', 1000);\n    await driver.sleep(1000)\n\n    // 发布\n    await driver.findElement(By.css(\".btn-post\")).click()\n    await driver.wait(async () => {\n      let value = null\n      try {\n        value = await driver.findElement(By.css(\".emphasis\"));\n        if (value) {\n          return true\n        }\n      } catch (error) {\n        return false\n      }\n    }, timeOut, '发布视频失败', 1000);\n    await driver.sleep(1000)\n\n    // 继续\n    await driver.findElement(By.css(\".emphasis\")).click()\n    await driver.sleep(3000)\n    statusArr[taskIndex].status = 1\n    statusArr[taskIndex].time = (new Date()).valueOf()\n  }\n\n  return {\n    code: 0,\n    data: statusArr,\n    message: \"ok\"\n  };\n\n}" };
export const autoLoginBaidu = templateJSON.autoLoginBaidu;
export const autoLoginDouyin = templateJSON.autoLoginDouyin;
export const autoLoginError = templateJSON.autoLoginError;
export const autoLoginScript = templateJSON.autoLoginScript;
export const autoLoginScriptHeadLess = templateJSON.autoLoginScriptHeadLess;
export const douyinLoginVerificationBreak = templateJSON.douyinLoginVerificationBreak;
export const executeDemo = templateJSON.executeDemo;
export const executeFail = templateJSON.executeFail;
export const executeFailFN = templateJSON.executeFailFN;
export const helloWorld = templateJSON.helloWorld;
export const jiyanVerificationBreak = templateJSON.jiyanVerificationBreak;
export const manualADGoogle = templateJSON.manualADGoogle;
export const manualLoginBaidu = templateJSON.manualLoginBaidu;
export const manualLoginDouyin = templateJSON.manualLoginDouyin;
export const manualLoginScript = templateJSON.manualLoginScript;
export const openUrl = templateJSON.openUrl;
export const shoplineAuth = templateJSON.shoplineAuth;
export const shoplineAuthOther = templateJSON.shoplineAuthOther;
export const shoplineList = templateJSON.shoplineList;
export const shoplineLogin = templateJSON.shoplineLogin;
export const shoplineSimpleLogin = templateJSON.shoplineSimpleLogin;
export const tiktokUpload = templateJSON.tiktokUpload;
