export default { "openUrl": "module.exports = async (context) => { \n  let {driver,args,options} = context;\n  await driver.get(args.openUrl);\n  return {\n    code:0,\n    data:null,\n    message: \"success\",\n    isKeepOpen:true\n  };\n}\n\n\n", "shopline_auth_other": "const { Builder, By, until, logging, Actions, Key } = require('selenium-webdriver');\nconst { Options, ServiceBuilder } = require('selenium-webdriver/chrome');\nconst { XMLHttpRequest } = require('xmlhttprequest');\nconst crypto = require('crypto');\n\n\n\nlet result = {\n  code: -1,\n  data: null,\n  message: '未命中脚本,请手动登录',\n};\n\n\n\nmodule.exports =  async (context) => { \n  let {driver,args,options} = context;\n  result = shopline_auth({driver,args,result});\n  return result;\n}\n\n\nasync function shopline_auth({ driver,result,args}){\n  console.time('shopline:auth');\n  let shopline_admin_url = args.admin_url;\n  let appKey = args.appKey;\n  let secret = args.secret;\n  let scope = args.scope || \"read_customers,read_discounts,read_draft_orders,read_inventory,read_metafileds,read_orders,read_page,read_price_rules,read_products,read_script_tags,read_themes,read_store_information,read_store_metrics,read_marketing_event,read_payment\";\n  let redirectUri = args.redirectUri || \"https://www.baidu.com\";\n  const timeOut = 10000;//10s没请求到就退出\n  //Array.from(document.querySelectorAll(\"tbody tr td:nth-last-child(2)>span\")).map(v=>~v.innerText.indexOf('\\n')?v.innerText.slice(0,-1):v.innerText).join(\",\")\n  // https://zzshopline.myshopline.com/admin/\n  //https://developer.myshopline.com/docs/introduce/NOAkhsPT\n  \n  const shopline_admin_authorize = `oauth-web/#/oauth/authorize?appKey=${appKey}&responseType=code&scope=${scope}&redirectUri=${redirectUri}`;\n\n  const shopline_admin_create_url = 'oauth/token/create';\n  const create_headers = {\n    'content-type': 'application/json;charset=UTF-8',\n    appkey:appKey,\n    sign: '',\n    timestamp: '',\n  };\n\n  try {\n    await driver.get(shopline_admin_url);\n    await driver.get(shopline_admin_url + shopline_admin_authorize);\n    await new Promise((res) => new setTimeout(res, 4000));\n    const currCurl = await driver.getCurrentUrl();\n    console.log(\"currCurl\", currCurl);\n    if ((shopline_admin_url + shopline_admin_authorize) === currCurl) {\n      console.log(\"A\");\n      let authDom = await driver.wait( until.elementLocated(By.css('main button.ant-btn-primary')), timeOut, '执行超时', 1000);\n      console.log(\"authDom\", authDom);\n      await authDom.click();\n    } else {\n      console.log(\"B\");\n      //点击后还会跳转走下面逻辑\n      await driver.wait(async () => {\n        console.count(\"timeB-agin\");\n        const currCurl = await driver.getCurrentUrl();\n        return currCurl !== (shopline_admin_url + shopline_admin_authorize);\n      }, timeOut, '执行超时', 1000);\n    }\n    const currUrl = await driver.getCurrentUrl();\n    await driver.get(shopline_admin_url);\n    const params = getJSONByURL(currUrl);\n    console.log(\"currUrl\",currUrl);\n    console.log(\"params\",params);\n    let create_body = JSON.stringify({ code: params.code });\n    const timestamp = Date.now();\n    const hmac = crypto.createHmac('sha256', secret);\n    hmac.update(create_body + timestamp);\n    create_headers.sign = hmac.digest('hex');\n    create_headers.timestamp = timestamp;\n    result = await driver.executeAsyncScript(fetchCreate, shopline_admin_create_url, create_headers, create_body);\n  } catch (error) {\n    result.code = -1;\n    result.message = error.toString();\n  } finally {\n    console.timeEnd('shopline:auth');\n    return result;\n  }\n};\n\nasync function fetchCreate( shopline_admin_create_url, create_headers, create_body) {\n  const callback = arguments[arguments.length - 1];\n  const res = await (await fetch(shopline_admin_create_url, {\n    method: 'POST',\n    headers: create_headers,\n    body: create_body\n  })).json();\n  if (res?.code === 200) {\n    callback({\n      code: 0,\n      data: res?.data,\n      message:res?.message\n    });\n  } else { \n    callback({\n      code: -1,\n      data: null,\n      message:res?.message\n    });\n  }\n}\n\n\nfunction getJSONByURL(params) {\n  const index = params.indexOf('?');\n  if (!~index) return {};\n  params = params.slice(index + 1);\n  const res = {};\n  for (const item of params.split('&')) {\n    const [key, val] = item.split('=');\n    res[key] = val;\n  }\n  return res;\n}\n\nexports.shopline_auth = shopline_auth;\n\n\n\n", "shopline_simple_login": "const { Builder, By, until, logging, Actions, Key } = require('selenium-webdriver');\r\nconst { Options, ServiceBuilder } = require('selenium-webdriver/chrome');\r\nconst { XMLHttpRequest } = require('xmlhttprequest');\r\n\r\nlet account = null;\r\nlet password = null;\r\n\r\nlet timeOut = 3 * 1000;//5分钟执行\r\nconst shopline_login_url = 'https://admin.myshopline.com/user/signIn';\r\nconst loginSuccess = 'https://admin.myshopline.com/stores/list';\r\nconst loginInfoURL = 'https://admin.myshopline.com/api/merchant/staffs/merchant/email/list';\r\n\r\nlet result = {\r\n  code: -1,\r\n  data: null,\r\n  message: '未命中脚本,请手动登录',\r\n}\r\nmodule.exports = async ({ driver, args }) => {\r\n  account = args.account;\r\n  await driver.get(shopline_login_url);\r\n  await new Promise(res=>setTimeout(res,2000))\r\n  let cookies = await driver.manage().getCookies() || [];\r\n  console.log(\"cookies\",cookies);\r\n  //通过cookie判断是否跳过登录\r\n  const res = cookies.find(v => v.domain === '.myshopline.com' && v.name === 'a_osudb_oar');\r\n  console.log(\"res\",res);\r\n  if (!res) { \r\n    return {\r\n      code: -1,\r\n      data: null,\r\n      message: '未登录',\r\n    };\r\n  }\r\n    //已经登录\r\n    await driver.get(loginSuccess);\r\n    let { code, data } = await driver.executeAsyncScript(fetchLoginInfo, loginInfoURL);\r\n    if (code !== 0) return;\r\n    //判断是否是本人登录\r\n    if (data && ~data.toString().indexOf(account)) {\r\n      result = {\r\n        code: 0,\r\n        data: \"\",\r\n        message: '已登录',\r\n      };\r\n    } else {\r\n      result = {\r\n        code: -1,\r\n        data: \"\",\r\n        message: '该账号已登录，不是本人,请重新手动登录',\r\n      };\r\n  }\r\n  return result;\r\n}\r\n\r\n\r\n\r\nasync function fetchLoginInfo(loginInfoURL) {\r\n  const callback = arguments[arguments.length - 1];\r\n  const res = await (await fetch(loginInfoURL, {})).json();\r\n  if (res?.code === \"SUCCESS\") {\r\n    callback({\r\n      code: 0,\r\n      data: res?.data,\r\n      message: res?.msg\r\n    });\r\n  } else {\r\n    callback({\r\n      code: -1,\r\n      data: null,\r\n      message: res?.msg\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n" }